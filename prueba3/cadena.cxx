// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file cadena.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "cadena.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

HelloWorld::HelloWorld()
{
    // m_msg com.eprosima.idl.parser.typecode.StringTypeCode@26aa12dd
    m_msg ="";
    // m_load com.eprosima.idl.parser.typecode.SequenceTypeCode@711f39f9


}

HelloWorld::~HelloWorld()
{


}

HelloWorld::HelloWorld(const HelloWorld &x)
{
    m_msg = x.m_msg;
    m_load = x.m_load;
}

HelloWorld::HelloWorld(HelloWorld &&x)
{
    m_msg = std::move(x.m_msg);
    m_load = std::move(x.m_load);
}

HelloWorld& HelloWorld::operator=(const HelloWorld &x)
{

    m_msg = x.m_msg;
    m_load = x.m_load;

    return *this;
}

HelloWorld& HelloWorld::operator=(HelloWorld &&x)
{

    m_msg = std::move(x.m_msg);
    m_load = std::move(x.m_load);

    return *this;
}

size_t HelloWorld::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t HelloWorld::getCdrSerializedSize(const HelloWorld& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.msg().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.load().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

void HelloWorld::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_msg;
    scdr << m_load;
}

void HelloWorld::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_msg;
    dcdr >> m_load;
}

/*!
 * @brief This function copies the value in member msg
 * @param _msg New value to be copied in member msg
 */
void HelloWorld::msg(const std::string &_msg)
{
m_msg = _msg;
}

/*!
 * @brief This function moves the value in member msg
 * @param _msg New value to be moved in member msg
 */
void HelloWorld::msg(std::string &&_msg)
{
m_msg = std::move(_msg);
}

/*!
 * @brief This function returns a constant reference to member msg
 * @return Constant reference to member msg
 */
const std::string& HelloWorld::msg() const
{
    return m_msg;
}

/*!
 * @brief This function returns a reference to member msg
 * @return Reference to member msg
 */
std::string& HelloWorld::msg()
{
    return m_msg;
}
/*!
 * @brief This function copies the value in member load
 * @param _load New value to be copied in member load
 */
void HelloWorld::load(const std::vector<int32_t> &_load)
{
m_load = _load;
}

/*!
 * @brief This function moves the value in member load
 * @param _load New value to be moved in member load
 */
void HelloWorld::load(std::vector<int32_t> &&_load)
{
m_load = std::move(_load);
}

/*!
 * @brief This function returns a constant reference to member load
 * @return Constant reference to member load
 */
const std::vector<int32_t>& HelloWorld::load() const
{
    return m_load;
}

/*!
 * @brief This function returns a reference to member load
 * @return Reference to member load
 */
std::vector<int32_t>& HelloWorld::load()
{
    return m_load;
}

size_t HelloWorld::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;





    return current_align;
}

bool HelloWorld::isKeyDefined()
{
   return false;
}

void HelloWorld::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}
